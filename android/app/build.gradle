apply plugin: 'com.android.application'

// Derive versionName/versionCode automatically with overrides
def readPackageJsonVersion = {
    try {
        // package.json is at project root; rootProject.projectDir points to /android
        def pkgFile = new File(rootProject.projectDir, '../package.json')
        if (pkgFile.exists()) {
            def text = pkgFile.getText('UTF-8')
            def m = (text =~ /"version"\s*:\s*"([^"]+)"/)
            if (m.find()) {
                return (m.group(1) as String)
            }
        }
    } catch (ignored) {}
    return null
}

def computeVersionCode = { String v ->
    try {
        def m = (v =~ /(\d+)\.(\d+)\.(\d+)/)
        if (m.find()) {
            int major = m.group(1) as int
            int minor = m.group(2) as int
            int patch = m.group(3) as int
            int code = major * 10000 + minor * 100 + patch
            return Math.max(code, 1)
        }
    } catch (ignored) {}
    return 1
}

// Single source of truth: package.json version; fallback to 1.0.0
def resolvedVersionName = (readPackageJsonVersion() ?: '1.0.0')
def versionCodeInt = computeVersionCode(resolvedVersionName) as int

android {
    namespace "io.devforth.lik"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "io.devforth.lik"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionCodeInt
        versionName resolvedVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    buildTypes {
        release {
            // Ensure the release build is not debuggable for Play Store
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}

// Print the app version once per build when assembling/bundling release
tasks.register("printAppVersion") {
    doLast {
        logger.lifecycle("Building Android app: applicationId=io.devforth.lik, versionName=${resolvedVersionName}, versionCode=${versionCodeInt}")
    }
}

tasks.matching { it.name in ['assembleRelease', 'bundleRelease'] }.configureEach {
    dependsOn("printAppVersion")
}
